[{"content":"Current network map 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Internet | Home Router (192.168.1.1/24) |------------------- Other devices on Home Network | | (VLAN 10 Uplink - Untagged) Switch | Proxmox Host ------ OPNsense VM (Uplink on VLAN 10, Internal on VLAN 5) | | | | (VLAN 5 \u0026amp; 10) | (VLAN 5 Internal) | | | VMs \u0026amp; Proxmox Host | VMs on Internal Network | (10.0.x.x/16) | (10.0.x.x/16) | | OPNsense IP: 10.0.0.1 | VLAN 5 acts as the internal network isolated from your home, while VLAN 10 is used as an \u0026lsquo;uplink\u0026rsquo; for OPNsense and any hosts and is untagged for the router.\nOPNsense has a network bridge to both VLAN 5 and 10, routing between the VLAN 5 \u0026lsquo;LAN\u0026rsquo; network and VLAN 10 \u0026lsquo;WAN\u0026rsquo;.\nFurther isolations (3 or more vlans) 1 2 3 4 5 6 7 8 9 10 11 12 13 Internet | Home Router (192.168.1.1/24) |------------------- Other devices on Home Network | | (VLAN 10 Uplink - Untagged) Switch | Proxmox Host ------ OPNsense VM (Uplink on VLAN 10, Internal on VLAN 15) | | | (VLAN 5) | (VLAN 15 Internal) VMs on Management VMs on Internal Network Network (10.0.0.x/24) (10.15.0.x/24) OPNsense allows you to add optional network adapters as well, giving you the ability to further isolate the setup with further VLANs. In this example, VLAN 15 will be isolated from your management network. Isolation like this should be used for publicly exposed services.\nUsing OPNsense firewall rules, you could block VLAN 15 from connecting to devices with IP ranges 10.0.x.x and 192.168.1.x, giving it only access to the internet and needed internal services.\n","date":"2023-09-19T12:20:06-04:00","permalink":"https://adminarchives.com/post/isolate-your-homelab-using-vlans-proxmox-and-opnsense/","title":"Isolate your homelab using VLANs, Proxmox, and OPNsense"},{"content":"Why use this over services like Tailscale, Zerotier, etc? WireGuard through a VPS will give you\nMore control over your network and where your data goes. Infrastructure independence; you will not need to rely on proprietary servers that could go down at any time. Host on VPS of your choosing and get a public IP for your homelab. Also, it\u0026rsquo;s extremely fast. It can easily transfer over 500 mbit/s while only adding a few milliseconds of latency. This website is currently running through the setup and I am able to establish a connection through the VPS (hosted about 100 miles away) and back to my home network with less than 20ms of latency. I even host game servers with this setup and have friends connect from across the country without issue.\nNetwork Diagram 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 +-------------+ | Internet | +-------------+ | | +------------+ +------------+ | Public | | Public | | Users |\u0026lt;----\u0026gt;| VPS | +------------+ +------------+ | | | | | | Public Reverse Proxy +-------------+ | | (for specific, forwarded services) | CGNAT | | +-------------+ | Secure WireGuard Network | | (Access entire home network | | if connected through WireGuard) +------------+ | | Home |\u0026lt;--------+ | WireGuard | | Server | +------------+ | +-------------+ | Home Network| | \u0026amp; Services | +-------------+ Requirments Device or VM on home network with Wireguard VPS with public IP, Wireguard, and a reverse proxy of choice.\n(Nginx Proxy Manager is great for most basic uses) WireGuard Configs VPS Gateway First, we have the WireGuard config for the VPS. The config has IP rules that route any traffic coming in from the WireGuard interface to go back out of the WireGuard interface. This is what allows you to connect to the rest of your home network, as well as the internet through your home network. It also adds an optional route to your home network. This route is for the VPS itself to route to your home network through WireGuard, and should be used for if you have a public reverse proxy forwarding from your home network. Finally, it has your home WireGuard server as a peer, along with any other devices you\u0026rsquo;d like on the network.\nYour VPS may or may not have a firewall setup by default, but I recommend using UFW and only allowing connections on the ports for WireGuard and your reverse proxy.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 [Interface] # Use unique WG subnet Address = 10.0.0.1/24 ListenPort = 51820 PrivateKey = #### # Route incoming WG traffic out of WG interface (Forward to home WG server) Table = 123 PreUp = sysctl -w net.ipv4.ip_forward=1 PreUp = ip rule add iif wg0 table 123 priority 456 PostDown = ip rule del iif wg0 table 123 priority 456 PreUp = sysctl -w net.ipv6.conf.all.forwarding=1 PreUp = ip -6 rule add iif wg0 table 123 priority 456 PostDown = ip -6 rule del iif wg0 table 123 priority 456 # Make this your home subnet. Custom route for traffic from VPS/reverse proxy PostUp = ip route add 192.168.1.1/24 dev wg0 # Home WG server. Use keep alive behind NAT. [Peer] PublicKey = #### PresharedKey = #### AllowedIPs = 0.0.0.0/0 PersistentKeepalive = 25 # Add other clients here # Example: laptop client [Peer] PublicKey = #### PresharedKey = #### # Unique IP with /32 subnet (will only route packets for that ip to that device) AllowedIPs = 10.0.0.5/32 PersistentKeepalive = 25 NOTE: The Wireguard network and your home network must be on different subnets! Custom routing and masquarading rules will allow you to connect to home network through Wireguard. These rules were adapted from adapted from Multi Hop Wireguard by Justin Ludwig.\nHome Server Your home WireGuard server takes all traffic coming in and marks it with a tag. Packets with this tag are then masqueraded out through your servers default gateway (your home network or home router). This allows you to connect to other devices on the home network as well as the internet through your home network, such that any devices connected through WireGuard will share the same public IP as your home network.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 [Interface] PrivateKey = #### Address = 10.0.0.2/24 # Masquerade traffic over default network (Home lan/wan) PreUp = sysctl -w net.ipv4.ip_forward=1 PreUp = iptables -t mangle -A PREROUTING -i wg0 -j MARK --set-mark 0x30 PreUp = iptables -t nat -A POSTROUTING ! -o wg0 -m mark --mark 0x30 -j MASQUERADE PostDown = iptables -t mangle -D PREROUTING -i wg0 -j MARK --set-mark 0x30 PostDown = iptables -t nat -D POSTROUTING ! -o wg0 -m mark --mark 0x30 -j MASQUERADE PreUp = sysctl -w net.ipv6.conf.all.forwarding=1 PreUp = ip6tables -t mangle -A PREROUTING -i wg0 -j MARK --set-mark 0x30 PreUp = ip6tables -t nat -A POSTROUTING ! -o wg0 -m mark --mark 0x30 -j MASQUERADE PostDown = ip6tables -t mangle -D PREROUTING -i wg0 -j MARK --set-mark 0x30 PostDown = ip6tables -t nat -D POSTROUTING ! -o wg0 -m mark --mark 0x30 -j MASQUERADE # Public VPS gateway [Peer] PublicKey = #### PresharedKey = #### Endpoint = ##.##.##.##:51820 AllowedIPs = 10.0.0.1/24 PersistentKeepalive = 25 Nginx Reverse Proxy Finally, you may want to set up a reverse proxy. This will allow you to connect to services at home through a public domain as well as forward port streams directly, such as for a game server.\nI would highly recommend using Nginx Proxy Manager (NPM). Use the following Docker Compose to get it running very quick.\n1 2 3 4 5 6 7 8 9 10 11 version: \u0026#39;3.8\u0026#39; services: nginx: image: \u0026#39;jc21/nginx-proxy-manager:latest\u0026#39; container_name: proxy restart: unless-stopped network_mode: \u0026#34;host\u0026#34; volumes: - ./data:/data - ./letsencrypt:/etc/letsencrypt - /var/log/nginx:/var/log/nginx From the NPM web interface you can add domains and requests to those domain are forwarded to the specified IP address and port of a service on your home network. Now just point that domain towards your public VPS and you can connect to that domain from anywhere!\n","date":"2023-08-23T12:20:06-04:00","permalink":"https://adminarchives.com/post/wireguard-vps-as-reverse-proxy-and-gateway-to-home-network/","title":"WireGuard VPS as Reverse Proxy and Gateway to Home Network"}]